version: "3.8"

services:
    # MongoDB service
    mongodb:
        image: mongo:latest
        container_name: mongodb-dev
        restart: always
        ports:
            - "27017:27017"
        volumes:
            - mongodb_data_dev:/data/db
        command: ["--replSet", "rs0", "--bind_ip_all"]
        healthcheck:
            test: mongosh --eval 'db.runCommand("ping").ok' --quiet
            interval: 10s
            timeout: 10s
            retries: 5
            start_period: 40s
        networks:
            - app-network-dev

    # MongoDB setup service
    mongo-init:
        image: mongo:latest
        container_name: mongo-init-dev
        restart: "no"
        depends_on:
            mongodb:
                condition: service_healthy
        command: >
            mongosh --host mongodb-dev:27017 --eval '
            if (!rs.isMaster().ismaster) {
                rs.initiate({
                    _id: "rs0",
                    members: [{ _id: 0, host: "mongodb-dev:27017" }]
                });
            };'
        networks:
            - app-network-dev

    # Server service (development mode with hot reloading)
    server:
        build:
            context: ./server
            dockerfile: Dockerfile.dev
        container_name: server-dev
        restart: always
        ports:
            - "5001:5001"
        depends_on:
            mongo-init:
                condition: service_completed_successfully
        environment:
            - PORT=5001
            - NODE_ENV=development
            - MONGODB_URI=mongodb://mongodb-dev:27017/ai-narrative?replicaSet=rs0
            - CLIENT_URL=http://localhost:3000
            - OPENAI_API_KEY=${OPENAI_API_KEY}
            - SUPABASE_URL=${SUPABASE_URL}
            - SUPABASE_KEY=${SUPABASE_KEY}
            - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
        volumes:
            - ./server:/app
            - /app/node_modules
        command: >
            sh -c "npm install @supabase/supabase-js &&
                   npm run dev"
        networks:
            - app-network-dev

    # Client service (development mode with hot reloading)
    client:
        build:
            context: ./client
            dockerfile: Dockerfile.dev
        container_name: client-dev
        restart: always
        ports:
            - "3000:3000"
        depends_on:
            - server
        environment:
            - REACT_APP_API_URL=http://localhost:5001/api
            - REACT_APP_SOCKET_URL=http://localhost:5001
        volumes:
            - ./client:/app
            - /app/node_modules
        command: >
            sh -c "npm install axios &&
                   npm start"
        networks:
            - app-network-dev

networks:
    app-network-dev:
        driver: bridge

volumes:
    mongodb_data_dev:
